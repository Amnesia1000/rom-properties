# zstd: Fast compression library.
PROJECT(zstd VERSION 1.4.5 LANGUAGES C)

# rom-properties: Enable multithreading.
SET(ZSTD_MULTITHREAD ON)

ADD_DEFINITIONS(-DXXH_NAMESPACE=ZSTD_)

# Remove /Gz from CFLAGS.
# We're not going to modify zstd to have cdecl specifications.
STRING(REPLACE "/Gz" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

# Always building with high optimizations.
IF(MSVC)
	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /O2")
	SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /O2")
ELSE(MSVC)
	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O3")
	SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3")
ENDIF(MSVC)

FILE(GLOB ZSTDCOMMON_FILES common/*.c)
FILE(GLOB ZSTDCOMP_FILES compress/*.c)
FILE(GLOB ZSTDDECOMP_FILES decompress/*.c)
FILE(GLOB ZDICT_FILES dictBuilder/*.c)
FILE(GLOB ZDEPR_FILES deprecated/*.c)

SET(ZSTD_FILES ${ZSTDCOMMON_FILES})

# Modules
SET(ZSTD_LIB_COMPRESSION ON)
SET(ZSTD_LIB_DECOMPRESSION ON)
SET(ZSTD_LIB_DICTBUILDER OFF)
SET(ZSTD_LIB_DEPRECATED OFF)

# Legacy support
SET(ZSTD_LEGACY_SUPPORT 0)
SET(ZSTD_LEGACY_MULTITHREADED_API OFF)

# Build size optimizations
SET(HUF_FORCE_DECOMPRESS_X1 OFF)
SET(HUF_FORCE_DECOMPRESS_X2 OFF)
SET(ZSTD_FORCE_DECOMPRESS_SHORT OFF)
SET(ZSTD_FORCE_DECOMPRESS_LONG OFF)
SET(ZSTD_NO_INLINE OFF)
SET(ZSTD_STRIP_ERROR_STRINGS OFF)

IF(NOT ZSTD_LIB_COMPRESSION)
	SET(ZSTD_LIB_DICTBUILDER OFF)
	SET(ZSTD_LIB_DEPRECATED OFF)
ENDIF(NOT ZSTD_LIB_COMPRESSION)

IF(NOT ZSTD_LIB_DECOMPRESSION)
	SET(ZSTD_LEGACY_SUPPORT OFF)
	SET(ZSTD_LIB_DEPRECATED OFF)
ENDIF(NOT ZSTD_LIB_DECOMPRESSION)

IF(ZSTD_LIB_COMPRESSION)
	SET(ZSTD_FILES ${ZSTD_FILES} ${ZSTDCOMP_FILES})
ENDIF(ZSTD_LIB_COMPRESSION)

IF(ZSTD_LIB_DECOMPRESSION)
	SET(ZSTD_FILES ${ZSTD_FILES} ${ZSTDDECOMP_FILES})
ENDIF(ZSTD_LIB_DECOMPRESSION)

IF(ZSTD_LIB_DEPRECATED)
	SET(ZSTD_FILES ${ZSTD_FILES} ${ZDEPR_FILES})
ENDIF(ZSTD_LIB_DEPRECATED)

IF(ZSTD_LIB_DICTBUILDER)
	SET(ZSTD_FILES ${ZSTD_FILES} ${ZDICT_FILES})
ENDIF(ZSTD_LIB_DICTBUILDER)

IF(HUF_FORCE_DECOMPRESS_X1)
	ADD_DEFINITIONS(-DHUF_FORCE_DECOMPRESS_X1)
ENDIF(HUF_FORCE_DECOMPRESS_X1)

IF(HUF_FORCE_DECOMPRESS_X2)
	ADD_DEFINITIONS(-DHUF_FORCE_DECOMPRESS_X2)
ENDIF(HUF_FORCE_DECOMPRESS_X2)

IF(ZSTD_FORCE_DECOMPRESS_SHORT)
	ADD_DEFINITIONS(-DZSTD_FORCE_DECOMPRESS_SHORT)
ENDIF(ZSTD_FORCE_DECOMPRESS_SHORT)

IF(ZSTD_FORCE_DECOMPRESS_LONG)
	ADD_DEFINITIONS(-DZSTD_FORCE_DECOMPRESS_LONG)
ENDIF(ZSTD_FORCE_DECOMPRESS_LONG)

IF(ZSTD_NO_INLINE)
	ADD_DEFINITIONS(-DZSTD_NO_INLINE)
ENDIF(ZSTD_NO_INLINE)

IF(ZSTD_STRIP_ERROR_STRINGS)
	ADD_DEFINITIONS(-DZSTD_STRIP_ERROR_STRINGS)
ENDIF(ZSTD_STRIP_ERROR_STRINGS)

IF(ZSTD_LEGACY_MULTITHREADED_API)
	ADD_DEFINITIONS(-DZSTD_LEGACY_MULTITHREADED_API)
ENDIF(ZSTD_LEGACY_MULTITHREADED_API)

# FIXME: Legacy support.
IF(ZSTD_LEGACY_SUPPORT)
#ifeq ($(shell test $(ZSTD_LEGACY_SUPPORT) -lt 8; echo $$?), 0)
#	ZSTD_FILES += $(shell ls legacy/*.c | $(GREP) 'v0[$(ZSTD_LEGACY_SUPPORT)-7]')
#endif
ENDIF(ZSTD_LEGACY_SUPPORT)
ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=${ZSTD_LEGACY_SUPPORT})

ADD_LIBRARY(zstd ${ZSTD_FILES})
TARGET_INCLUDE_DIRECTORIES(zstd
	INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
	)
DO_SPLIT_DEBUG(zstd)
SET_WINDOWS_SUBSYSTEM(zstd WIN32)

ADD_LIBRARY(zstdstatic STATIC ${ZSTD_FILES})
TARGET_INCLUDE_DIRECTORIES(zstdstatic
	INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
	)
DO_SPLIT_DEBUG(zstdstatic)
SET_WINDOWS_SUBSYSTEM(zstdstatic WIN32)

IF(ZSTD_MULTITHREAD)
	IF(NOT WIN32)
		FIND_PACKAGE(Threads REQUIRED)
	ENDIF(NOT WIN32)
	IF(CMAKE_THREAD_LIBS_INIT)
		TARGET_LINK_LIBRARIES(zstd PUBLIC ${CMAKE_THREAD_LIBS_INIT})
		TARGET_LINK_LIBRARIES(zstdstatic PUBLIC ${CMAKE_THREAD_LIBS_INIT})
	ENDIF(CMAKE_THREAD_LIBS_INIT)
ENDIF(ZSTD_MULTITHREAD)

# Unix: Add -fpic/-fPIC in order to use this static library in plugins.
IF(UNIX AND NOT APPLE)
	SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -fpic -fPIC")
	SET(CMAKE_CXX_FLAGS	"${CMAKE_CXX_FLAGS} -fpic -fPIC")
ENDIF(UNIX AND NOT APPLE)
